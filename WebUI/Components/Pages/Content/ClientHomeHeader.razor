@rendermode InteractiveServer
@implements IDisposable

<div class="page-header flex-wrap" style="margin-top:0rem">
	<h3 class="mb-0">
		Welcome client! <span class="pl-0 h6 pl-sm-2 text-muted d-inline-block!">Your Inventory System Dashboard</span>
	</h3>
	<div class="d-flex">
		<button type="button" class="btn btn-sm btn-outline-warning btn-icon-text border-1 position-relative ml-5"
		@onclick="(()=>homeGenericState.GetProcessingOrderButtonClicked(OrderState.Processing, true))">
			<i class="mdi mdi-sync btn-icon-prepend"></i> Processing
			<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning">
				@userActiveOrderCountState.ProcessingCount
				<span class="visually-hidden">Unread messages</span>
			</span>
		</button>

		<button type="button" class="btn btn-sm btn-outline-primary btn-icon-text border-1 position-relative ml-5"
		@onclick="(()=>homeGenericState.GetProcessingOrderButtonClicked(OrderState.Delivering, true))">
			<i class="mdi mdi-swim btn-icon-prepend"></i> Delivering
			<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
				@userActiveOrderCountState.DeliveringCount
				<span class="visually-hidden">Unread messages</span>
			</span>
		</button>
		<button type="button" class="btn btn-sm btn-outline-success btn-icon-text border-1 position-relative ml-5"
				@onclick="(()=>homeGenericState.GetProcessingOrderButtonClicked(OrderState.Delivered, true))">
			<i class="mdi mdi-swim btn-icon-prepend"></i> Delivered
			<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
				@userActiveOrderCountState.DeliveredCount
				<span class="visually-hidden">Unread messages</span>
			</span>
		</button>

		<button type="button" class="btn btn-sm btn-outline-danger btn-icon-text border-1 position-relative ml-5"
		@onclick="(()=>homeGenericState.GetProcessingOrderButtonClicked(OrderState.Canceled, true))">
			<i class="mdi mdi-sync btn-icon-prepend"></i> Canceled
			<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
				@userActiveOrderCountState.CanceledCount
				<span class="visually-hidden">Unread messages</span>
			</span>
		</button>
	</div>
</div>

@code {
	[CascadingParameter] public Task<AuthenticationState>? UserAuthState { get; set; }

	protected override async Task OnInitializedAsync()
	{
		userActiveOrderCountState.StateChanged += StateHasChanged;
		try
		{
			string userId = (await UserAuthState!).User!.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value; // NameIdentifier gives the id of the current user 
			await userActiveOrderCountState.GetActiveOrdersCount(userId);
		
		}catch{}
		
	}
	public void Dispose() => userActiveOrderCountState.StateChanged -= StateHasChanged;
}
