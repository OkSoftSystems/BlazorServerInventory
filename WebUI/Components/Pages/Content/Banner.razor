@using Application.DTO.Response.Orders
@using System.Security.Claims
@using Application.Service.Orders
@using MediatR
@using Microsoft.Extensions.DependencyInjection

@inject IServiceProvider serviceProvider

<AuthorizeView Policy="AdministrationPolicy">
    <div class="row">
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-warning">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Ordered Products</p>
                            <h2 class="text-white">
                                $ @AdminTotalAmountOfOrderedProduct.ToString("#,##.00")
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-basket bg-inverse-icon-warning"></i>
                    </div>
                    <h6 class="text-white">Gross products ordered</h6>
                </div>
            </div>
        </div>
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-danger">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Only Today</p>
                            <h2 class="text-white">
                                $ @AdminOnlyTodayOrderedProduct.ToString("#,##0.00")
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-basket bg-inverse-icon-danger"></i>
                    </div>
                    <h6 class="text-white">@(AdminTodayOrdersPercentage.ToString("0.##") + "%") of gross</h6>
                </div>
            </div>
        </div>
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-primary">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Last Month</p>
                            <h2 class="text-white">
                                $ @AdminTotalAmountOfProductOrderedForLastMonth.ToString("#,##0.00")
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-briefcase-outline bg-inverse-icon-primary"></i>
                    </div>
                    <h6 class="text-white">@(AdminLastMonthProductOfOrderedPercentageOverAll.ToString("0.##") + "%") </h6>
                </div>
            </div>
        </div>
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-success">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Gross Product Quantities Ordered</p>
                            <h2 class="text-white">
                                @AdminGrossProductQuantitiesOrdered
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-account-circle bg-inverse-icon-success"></i>
                    </div>
                    <h6 class="text-white">@AdminTodayProductQuantitiesOrdered Only Today</h6>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>
<AuthorizeView Policy="@Policy.UserPolicy">
    <div class="row">
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-warning">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Ordered Products</p>
                            <h2 class="text-white">
                                $ @ClientTotalAmountOfOrderedProduct.ToString("#,##.00")
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-basket bg-inverse-icon-warning"></i>
                    </div>
                    <h6 class="text-white">Gross products ordered</h6>
                </div>
            </div>
        </div>
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-danger">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Only Today</p>
                            <h2 class="text-white">
                                $ @ClientOnlyTodayOrderedProduct.ToString("#,##0.00")
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-basket bg-inverse-icon-danger"></i>
                    </div>
                    <h6 class="text-white">@(ClientTodayOrdersPercentage.ToString("0.##") + "%") of gross</h6>
                </div>
            </div>
        </div>
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-primary">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Last Month</p>
                            <h2 class="text-white">
                                $ @ClientTotalAmountOfProductOrderedForLastMonth.ToString("#,##0.00")
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-briefcase-outline bg-inverse-icon-primary"></i>
                    </div>
                    <h6 class="text-white">@(ClientLastMonthProductOfOrderedPercentageOverAll.ToString("0.##") + "%") </h6>
                </div>
            </div>
        </div>
        <div class="col-xl-12 col-md-6 stretch-card grid-margin grid-margin-sm-0 pb-sm-3">
            <div class="card bg-success">
                <div class="card-body px-3 py-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="color-card">
                            <p class="mb-0 color-card-head">Gross Product Quantities Ordered</p>
                            <h2 class="text-white">
                                @ClientGrossProductQuantitiesOrdered
                            </h2>
                        </div>
                        <i class="card-icon-indicator mdi mdi-account-circle bg-inverse-icon-success"></i>
                    </div>
                    <h6 class="text-white">@ClientTodayProductQuantitiesOrdered Only Today</h6>
                </div>
            </div>
        </div>
    </div>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState>? userAuthState { get; set; }
    private IEnumerable<GetOrderResponseDTO> UserOrders = [];
    private IEnumerable<GetOrderResponseDTO> AdminOrders = [];
    ClaimsPrincipal? User;
    private decimal ClientTotalAmountOfOrderedProduct;
    private decimal ClientOnlyTodayOrderedProduct;
    private decimal ClientTodayOrdersPercentage;
    private int ClientGrossProductQuantitiesOrdered;
    private int ClientTodayProductQuantitiesOrdered;
    private decimal ClientTotalAmountOfProductOrderedForLastMonth;
    private decimal ClientLastMonthProductOfOrderedPercentageOverAll;

    private decimal AdminTotalAmountOfOrderedProduct;
    private decimal AdminOnlyTodayOrderedProduct;
    private decimal AdminTodayOrdersPercentage;
    private int AdminGrossProductQuantitiesOrdered;
    private int AdminTodayProductQuantitiesOrdered;
    private decimal AdminTotalAmountOfProductOrderedForLastMonth;
    private decimal AdminLastMonthProductOfOrderedPercentageOverAll;

    protected override async Task OnInitializedAsync()
    {
        await LoadDefaults();
    }

    async Task LoadDefaults()
    {
        try
        {
            User = (await userAuthState!).User;
            if (User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)!.Value.Equals("User", StringComparison.OrdinalIgnoreCase))
            {
                string userId = User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)!.Value.ToString();
                using var scope = serviceProvider.CreateScope();
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                UserOrders = (await mediator.Send(new GetOrdersByIdQuery(userId)));
                GetClientSections();
            }
            else if (User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)!.Value.Equals("Admin", StringComparison.OrdinalIgnoreCase))
            {             
                using var scope = serviceProvider.CreateScope();
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                AdminOrders = (await mediator.Send(new GetAllOrdersQuery()));
                GetAdminSections();
            }
        }
        catch{ }
    }

    void GetClientSections()
    {
        ClientTotalAmountOfOrderedProduct = UserOrders.Sum(x => x.TotalAmount);
        ClientOnlyTodayOrderedProduct = UserOrders.Where(x => x.OrderedDate.Date == DateTime.Today.Date).Sum(x => x.TotalAmount);
        ClientTodayOrdersPercentage = (ClientOnlyTodayOrderedProduct / ClientTotalAmountOfOrderedProduct) * 100;
        ClientGrossProductQuantitiesOrdered = UserOrders.Sum(x => x.Quantity);
        ClientTodayProductQuantitiesOrdered = UserOrders.Where(x => x.OrderedDate.Date == DateTime.Today.Date).Sum(x => x.Quantity);
        ClientTotalAmountOfProductOrderedForLastMonth = UserOrders.Where(x => x.OrderedDate.Date.AddMonths(-1) < DateTime.Today.AddMonths(0)).Sum(x => x.TotalAmount);
        ClientLastMonthProductOfOrderedPercentageOverAll = (ClientTotalAmountOfProductOrderedForLastMonth / ClientTotalAmountOfOrderedProduct) * 100;
    }

    void GetAdminSections()
    {
        AdminTotalAmountOfOrderedProduct = AdminOrders.Sum(x => x.TotalAmount);
        AdminOnlyTodayOrderedProduct = AdminOrders.Where(x => x.OrderedDate.Date == DateTime.Today.Date).Sum(x => x.TotalAmount);
        AdminTodayOrdersPercentage = (AdminOnlyTodayOrderedProduct / AdminTotalAmountOfOrderedProduct) * 100;
        AdminGrossProductQuantitiesOrdered = AdminOrders.Sum(x => x.Quantity);
        AdminTodayProductQuantitiesOrdered = AdminOrders.Where(x => x.OrderedDate.Date == DateTime.Today.Date).Sum(x => x.Quantity);
        AdminTotalAmountOfProductOrderedForLastMonth = AdminOrders.Where(x => x.OrderedDate.Date.AddMonths(-1) < DateTime.Today.AddMonths(0)).Sum(x => x.TotalAmount);
        AdminLastMonthProductOfOrderedPercentageOverAll = (AdminTotalAmountOfProductOrderedForLastMonth / AdminTotalAmountOfOrderedProduct) * 100;
    }
}

